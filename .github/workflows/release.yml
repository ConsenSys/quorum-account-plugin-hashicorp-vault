name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Check out project files
        uses: actions/checkout@v2
      - name: Extract version metadata
        id: meta
        run: |
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Create macos dist
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }}
      - name: Create portable linux dist
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }} extraldflags='-linkmode external -extldflags "-static"'
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: ${{ matrix.os }}-artifacts
          path: build
  create:
    name: Create a new version in Bintray
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Setup jfrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-artifacts
          path: ubuntu-latest-artifacts
      - name: Extract metadata
        id: meta
        run: |
          echo "::set-output name=package::$(cat ubuntu-latest-artifacts/plugin-meta.json | jq -r .name)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Prepare ${{ steps.meta.outputs.package }}@${{ steps.meta.outputs.version }} in Bintray
        run: |
          CHECK_PACKAGE="${{ secrets.BINTRAY_ORGANIZATION }}/${{ secrets.BINTRAY_REPOSITORY }}/${{ steps.meta.outputs.package }}"
          CHECK_VERSION="$CHECK_PACKAGE/${{ steps.meta.outputs.version }}"
          echo "Checking $CHECK_PACKAGE"
          jfrog bt package-show --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} $CHECK_PACKAGE
          echo "Checking $CHECK_VERSION"
          jfrog bt version-show --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} $CHECK_VERSION && x=0 || x=1
          if [ $x -eq 0 ]; then
            echo "$CHECK_VERSION already exists"
          else
            jfrog bt version-create --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} \
                  --vcs-tag ${{ steps.meta.outputs.version }} --released $(date -u +"%Y-%m-%dT%H:%M:%SZ") \
                  $CHECK_VERSION
          fi
  deploy:
    name: Deploy ${{ matrix.arch }} dist to Bintray
    runs-on: ubuntu-latest
    needs:
      - create
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        include:
          # include variables for the corresponding arch - used when uploading to bintray
          - os: "ubuntu-latest"
            arch: "linux-amd64"
          - os: "macos-latest"
            arch: "darwin-amd64"
    steps:
      - name: Setup jfrog CLI
        uses: jfrog/setup-jfrog-cli@v1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-artifacts
          path: ${{ matrix.os }}-artifacts
      - name: Extract metadata
        id: meta
        run: |
          echo "::set-output name=package::$(cat ${{ matrix.os }}-artifacts/plugin-meta.json | jq -r .name)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Upload artifacts to Bintray
        run: |
          jfrog bt upload --key ${{ secrets.BINTRAY_API_KEY }} --user ${{ secrets.BINTRAY_USER }} --publish --override \
                "${{ matrix.os }}-artifacts/dist/${{ steps.meta.outputs.package }}-${{ steps.meta.outputs.version_short }}.*" \
                ${{ secrets.BINTRAY_ORGANIZATION }}/${{ secrets.BINTRAY_REPOSITORY }}/${{ steps.meta.outputs.package }}/${{ steps.meta.outputs.version }} \
                ${{ steps.meta.outputs.package }}/${{ steps.meta.outputs.version }}/${{ matrix.arch }}/
