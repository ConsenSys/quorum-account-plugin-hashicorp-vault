// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goquorum/quorum-plugin-hashicorp-account-store/internal (interfaces: WalletFinderLockerBackend)

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	hashicorp "github.com/goquorum/quorum-plugin-hashicorp-account-store/internal/vault/hashicorp"
	reflect "reflect"
	time "time"
)

// MockWalletFinderLockerBackend is a mock of WalletFinderLockerBackend interface
type MockWalletFinderLockerBackend struct {
	ctrl     *gomock.Controller
	recorder *MockWalletFinderLockerBackendMockRecorder
}

// MockWalletFinderLockerBackendMockRecorder is the mock recorder for MockWalletFinderLockerBackend
type MockWalletFinderLockerBackendMockRecorder struct {
	mock *MockWalletFinderLockerBackend
}

// NewMockWalletFinderLockerBackend creates a new mock instance
func NewMockWalletFinderLockerBackend(ctrl *gomock.Controller) *MockWalletFinderLockerBackend {
	mock := &MockWalletFinderLockerBackend{ctrl: ctrl}
	mock.recorder = &MockWalletFinderLockerBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletFinderLockerBackend) EXPECT() *MockWalletFinderLockerBackendMockRecorder {
	return m.recorder
}

// BackendForVault mocks base method
func (m *MockWalletFinderLockerBackend) BackendForVault(arg0 string) (*hashicorp.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackendForVault", arg0)
	ret0, _ := ret[0].(*hashicorp.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendForVault indicates an expected call of BackendForVault
func (mr *MockWalletFinderLockerBackendMockRecorder) BackendForVault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendForVault", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).BackendForVault), arg0)
}

// Lock mocks base method
func (m *MockWalletFinderLockerBackend) Lock(arg0 accounts.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockWalletFinderLockerBackendMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).Lock), arg0)
}

// Subscribe mocks base method
func (m *MockWalletFinderLockerBackend) Subscribe(arg0 chan<- accounts.WalletEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockWalletFinderLockerBackendMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).Subscribe), arg0)
}

// TimedUnlock mocks base method
func (m *MockWalletFinderLockerBackend) TimedUnlock(arg0 accounts.Account, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimedUnlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimedUnlock indicates an expected call of TimedUnlock
func (mr *MockWalletFinderLockerBackendMockRecorder) TimedUnlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimedUnlock", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).TimedUnlock), arg0, arg1, arg2)
}

// Wallet mocks base method
func (m *MockWalletFinderLockerBackend) Wallet(arg0 string) (accounts.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallet", arg0)
	ret0, _ := ret[0].(accounts.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallet indicates an expected call of Wallet
func (mr *MockWalletFinderLockerBackendMockRecorder) Wallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallet", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).Wallet), arg0)
}

// Wallets mocks base method
func (m *MockWalletFinderLockerBackend) Wallets() []accounts.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]accounts.Wallet)
	return ret0
}

// Wallets indicates an expected call of Wallets
func (mr *MockWalletFinderLockerBackendMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockWalletFinderLockerBackend)(nil).Wallets))
}
