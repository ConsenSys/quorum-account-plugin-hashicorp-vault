// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goquorum/quorum-plugin-hashicorp-account-store/internal/vault (interfaces: PluginBackend)

// Package mock_vault is a generated GoMock package.
package mock_vault

import (
	reflect "reflect"

	accounts "github.com/ethereum/go-ethereum/accounts"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockPluginBackend is a mock of PluginBackend interface
type MockPluginBackend struct {
	ctrl     *gomock.Controller
	recorder *MockPluginBackendMockRecorder
}

// MockPluginBackendMockRecorder is the mock recorder for MockPluginBackend
type MockPluginBackendMockRecorder struct {
	mock *MockPluginBackend
}

// NewMockPluginBackend creates a new mock instance
func NewMockPluginBackend(ctrl *gomock.Controller) *MockPluginBackend {
	mock := &MockPluginBackend{ctrl: ctrl}
	mock.recorder = &MockPluginBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginBackend) EXPECT() *MockPluginBackendMockRecorder {
	return m.recorder
}

// FindWalletByUrl mocks base method
func (m *MockPluginBackend) FindWalletByUrl(arg0 string) (accounts.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletByUrl", arg0)
	ret0, _ := ret[0].(accounts.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletByUrl indicates an expected call of FindWalletByUrl
func (mr *MockPluginBackendMockRecorder) FindWalletByUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletByUrl", reflect.TypeOf((*MockPluginBackend)(nil).FindWalletByUrl), arg0)
}

// Subscribe mocks base method
func (m *MockPluginBackend) Subscribe(arg0 chan<- accounts.WalletEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPluginBackendMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPluginBackend)(nil).Subscribe), arg0)
}

// Wallets mocks base method
func (m *MockPluginBackend) Wallets() []accounts.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]accounts.Wallet)
	return ret0
}

// Wallets indicates an expected call of Wallets
func (mr *MockPluginBackendMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockPluginBackend)(nil).Wallets))
}
