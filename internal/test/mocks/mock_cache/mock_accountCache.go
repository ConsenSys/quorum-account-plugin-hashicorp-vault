// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goquorum/quorum-plugin-hashicorp-account-store/internal/cache (interfaces: AccountCache)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountCache is a mock of AccountCache interface
type MockAccountCache struct {
	ctrl     *gomock.Controller
	recorder *MockAccountCacheMockRecorder
}

// MockAccountCacheMockRecorder is the mock recorder for MockAccountCache
type MockAccountCacheMockRecorder struct {
	mock *MockAccountCache
}

// NewMockAccountCache creates a new mock instance
func NewMockAccountCache(ctrl *gomock.Controller) *MockAccountCache {
	mock := &MockAccountCache{ctrl: ctrl}
	mock.recorder = &MockAccountCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountCache) EXPECT() *MockAccountCacheMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockAccountCache) Accounts() []accounts.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts")
	ret0, _ := ret[0].([]accounts.Account)
	return ret0
}

// Accounts indicates an expected call of Accounts
func (mr *MockAccountCacheMockRecorder) Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAccountCache)(nil).Accounts))
}

// Add mocks base method
func (m *MockAccountCache) Add(arg0 accounts.Account, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add
func (mr *MockAccountCacheMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAccountCache)(nil).Add), arg0, arg1)
}

// Close mocks base method
func (m *MockAccountCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockAccountCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAccountCache)(nil).Close))
}

// Find mocks base method
func (m *MockAccountCache) Find(arg0 accounts.Account) (accounts.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(accounts.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAccountCacheMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountCache)(nil).Find), arg0)
}

// FindConfigFile mocks base method
func (m *MockAccountCache) FindConfigFile(arg0 accounts.Account) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConfigFile", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConfigFile indicates an expected call of FindConfigFile
func (mr *MockAccountCacheMockRecorder) FindConfigFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConfigFile", reflect.TypeOf((*MockAccountCache)(nil).FindConfigFile), arg0)
}

// HasAddress mocks base method
func (m *MockAccountCache) HasAddress(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAddress", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAddress indicates an expected call of HasAddress
func (mr *MockAccountCacheMockRecorder) HasAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAddress", reflect.TypeOf((*MockAccountCache)(nil).HasAddress), arg0)
}

// Lock mocks base method
func (m *MockAccountCache) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock
func (mr *MockAccountCacheMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockAccountCache)(nil).Lock))
}

// MaybeReload mocks base method
func (m *MockAccountCache) MaybeReload() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MaybeReload")
}

// MaybeReload indicates an expected call of MaybeReload
func (mr *MockAccountCacheMockRecorder) MaybeReload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaybeReload", reflect.TypeOf((*MockAccountCache)(nil).MaybeReload))
}

// Unlock mocks base method
func (m *MockAccountCache) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock
func (mr *MockAccountCacheMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockAccountCache)(nil).Unlock))
}
