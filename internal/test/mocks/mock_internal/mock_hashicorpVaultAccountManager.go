// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goquorum/quorum-plugin-hashicorp-vault-account-manager/internal (interfaces: HashicorpVaultAccountManager)

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	reflect "reflect"
	time "time"

	accounts "github.com/ethereum/go-ethereum/accounts"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	manager "github.com/goquorum/quorum-plugin-hashicorp-vault-account-manager/internal/manager"
)

// MockHashicorpVaultAccountManager is a mock of HashicorpVaultAccountManager interface
type MockHashicorpVaultAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockHashicorpVaultAccountManagerMockRecorder
}

// MockHashicorpVaultAccountManagerMockRecorder is the mock recorder for MockHashicorpVaultAccountManager
type MockHashicorpVaultAccountManagerMockRecorder struct {
	mock *MockHashicorpVaultAccountManager
}

// NewMockHashicorpVaultAccountManager creates a new mock instance
func NewMockHashicorpVaultAccountManager(ctrl *gomock.Controller) *MockHashicorpVaultAccountManager {
	mock := &MockHashicorpVaultAccountManager{ctrl: ctrl}
	mock.recorder = &MockHashicorpVaultAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashicorpVaultAccountManager) EXPECT() *MockHashicorpVaultAccountManagerMockRecorder {
	return m.recorder
}

// GetAccountCreator mocks base method
func (m *MockHashicorpVaultAccountManager) GetAccountCreator(arg0 string) (manager.AccountCreator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountCreator", arg0)
	ret0, _ := ret[0].(manager.AccountCreator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountCreator indicates an expected call of GetAccountCreator
func (mr *MockHashicorpVaultAccountManagerMockRecorder) GetAccountCreator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountCreator", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).GetAccountCreator), arg0)
}

// Lock mocks base method
func (m *MockHashicorpVaultAccountManager) Lock(arg0 accounts.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockHashicorpVaultAccountManagerMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).Lock), arg0)
}

// Subscribe mocks base method
func (m *MockHashicorpVaultAccountManager) Subscribe(arg0 chan<- accounts.WalletEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockHashicorpVaultAccountManagerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).Subscribe), arg0)
}

// TimedUnlock mocks base method
func (m *MockHashicorpVaultAccountManager) TimedUnlock(arg0 accounts.Account, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimedUnlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimedUnlock indicates an expected call of TimedUnlock
func (mr *MockHashicorpVaultAccountManagerMockRecorder) TimedUnlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimedUnlock", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).TimedUnlock), arg0, arg1, arg2)
}

// Wallet mocks base method
func (m *MockHashicorpVaultAccountManager) Wallet(arg0 string) (accounts.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallet", arg0)
	ret0, _ := ret[0].(accounts.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallet indicates an expected call of Wallet
func (mr *MockHashicorpVaultAccountManagerMockRecorder) Wallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallet", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).Wallet), arg0)
}

// Wallets mocks base method
func (m *MockHashicorpVaultAccountManager) Wallets() []accounts.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]accounts.Wallet)
	return ret0
}

// Wallets indicates an expected call of Wallets
func (mr *MockHashicorpVaultAccountManagerMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockHashicorpVaultAccountManager)(nil).Wallets))
}
